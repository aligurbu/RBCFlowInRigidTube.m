function [u, au, bu, Solution, f, viscousStress_prev, epsilbrev_prev, ...
          ITER] = ...
         SolveSpectralBIE_BEM(VesselVessel_LHS, VesselVessel_RHS, ...
                              VesselVessel_Preconditioner, ...
                              coord, connect, coordLocation, ...
                              numDofPerElem, elemDofNum, NeumannDofs, ...
                              inletelem, DirichletElem, NeumannElem, ...
                              FieldPts, NormalV, Weights, BasisFn, ...
                              Telem, ...
                              EE, FF, GG, WW, JXibrev, ...
                              LL, MM, NN, ...
                              UpSampleFactor, ...
                              ES, ED, EB, ...
                              StVenantKirchhoff, ...
                              NeoHookean, Skalak, ...
                              MembraneViscoelasticity, ...
                              mu_Mem, Tau, DT, ...
                              viscousStress_prev, ...
                              epsilbrev_prev, ...
                              axi, bxi, xi, ...
                              RotationMatrix, ...
                              nlatEqSpaced, nlonEqSpaced, N_EqSpaced, ...
                              RotationMatrix_EqSpaced, ...
                              NGSphere, NGthet, NGphi, ...
                              eta, wg, ...
                              nlat, nlon, mask_a, mask_b, ...
                              mu, lam, N, ...
                              grx, grw, gtx, gtw, numGaussPoints, ...
                              numNodes, numDofPerNode, ModelSize, ...
                              ToleranceGMRES, SolutionPrevious)
%%
RBCxi = reshape(xi, nlat*nlon, 3)';
cxi = [axi(mask_a); bxi(mask_b)];

%% Finer equally-spaced grid for the closest point computation
axiEqSpaced = UpSampling(axi,N,N_EqSpaced);
bxiEqSpaced = UpSampling(bxi,N,N_EqSpaced);
xiEqSpaced_ = shsecm(axiEqSpaced,bxiEqSpaced);
xiEqSpaced = reshape(xiEqSpaced_,nlatEqSpaced*nlonEqSpaced,3)';

%% Precomputation of integrals on vessel when the target point on RBC surface
[RBCVessel_LHS, RBCVessel_RHS] = ...
            Precompute_RBCVessel(RBCxi, coord, connect, ...
                                 inletelem, elemDofNum, ...
                                 NeumannDofs, DirichletElem, NeumannElem, ...
                                 FieldPts, NormalV, Weights, BasisFn, ...
                                 Telem, ...
                                 grx, grw, gtx, gtw, mu, numGaussPoints, ...
                                 numNodes, numDofPerNode, numDofPerElem);
%% Compute membrane traction
[f, viscousStress_prev, epsilbrev_prev] = ...
                       MembraneForces(EE, FF, GG, WW, JXibrev, ...
                                      LL, MM, NN, ...
                                      axi, bxi, ...
                                      UpSampleFactor, ...
                                      ES, ED, EB, ...
                                      StVenantKirchhoff, ...
                                      NeoHookean, Skalak, ...
                                      MembraneViscoelasticity, ...
                                      mu_Mem, Tau, DT, ...
                                      viscousStress_prev, ...
                                      epsilbrev_prev);
[af,bf] = shagcm(f); 
cf = [af(mask_a); bf(mask_b)];

%% Precomputation of integrals with Gf on RBC when target point on RBC surface
RBCRBC_RHS = computeGf(cf, cxi, RBCxi, RotationMatrix, ...
                       eta, wg, mask_a, mask_b, mu, ...
                       nlat, nlon, N, NGSphere, NGphi);

%% Precomputation of integrals with Gf on RBC when target point on vessel surface
VesselRBC_RHS = NearlySingular_ComputeGf(cf, cxi, xiEqSpaced, ...
                                         coord, coordLocation, ...
                                         RotationMatrix_EqSpaced, ...
                                         wg, mask_a, mask_b, mu, lam, ...
                                         N, NGSphere, NGphi);

%% Compute the RHS of system of equation
[aRBCVessel_RHS, bRBCVessel_RHS] = ...
          shagcm(reshape(reshape(RBCVessel_RHS,3,nlat*nlon)',nlat,nlon,3));
RBCVessel_RHS = [aRBCVessel_RHS(mask_a); bRBCVessel_RHS(mask_b)];
RHS = [VesselVessel_RHS - VesselRBC_RHS; ...
       RBCVessel_RHS - RBCRBC_RHS];


%% Set-up the LHS of system of equation

%% Precomputation of integrals with K kernel on RBC surface
%% when the target point on RBC surface
RBCRBC_Kernel = computeK(cxi, RBCxi, RotationMatrix, ...
                         eta, wg, mask_a, mask_b, ...
                         nlat, nlon, N, NGSphere, NGthet, NGphi);


%% Precomputation of integrals with K kernel on RBC surface 
%% when the target point on vessel surface with the nearly-singular integration
VesselRBC_Kernel = NearlySingular_ComputeK(cxi, xiEqSpaced, ...
                                           coord, ...
                                           RotationMatrix_EqSpaced, ...
                                           wg, mask_a, mask_b, ...
                                           N, NGSphere, NGthet, NGphi);

%% Solve the coupled system of equation
[Solution, ~, ~, ITER] = ...
     gmres(@computeSpectralBIE_BEM, RHS, [], ToleranceGMRES, ModelSize, ...
           @PreCondition, [], SolutionPrevious);
cu = Solution(numNodes*numDofPerNode + 1 : end);
au = zeros(size(axi));  bu = zeros(size(bxi));
au(mask_a) = cu(1:3*(N+1)*(N+2)/2);
bu(mask_b) = cu(3*(N+1)*(N+2)/2+1:3*(N+1)^2);
u = shsgcm(au, bu);

    %%
    function X = computeSpectralBIE_BEM(cX)
        X = zeros(ModelSize,1);
        X_VesselVessel = X(1:numNodes*numDofPerNode);
        X_RBCVessel = X(numNodes*numDofPerNode + 1 : end);
        X_VesselRBC = X(1:numNodes*numDofPerNode);
        X_RBCRBC = X(numNodes*numDofPerNode + 1 : end);
        cX_Vessel = cX(1:numNodes*numDofPerNode);
        cX_RBC = cX(numNodes*numDofPerNode + 1 : end);
        
        %% Collect unknown velocity field on RBC
        au = zeros(size(axi));  bu = zeros(size(bxi));
        au(mask_a) = cX_RBC(1:3*(N+1)*(N+2)/2);
        bu(mask_b) = cX_RBC(3*(N+1)*(N+2)/2+1:3*(N+1)^2);
        u = shsgcm(au, bu);

        auEqSpaced = UpSampling(au,N,N_EqSpaced);
        buEqSpaced = UpSampling(bu,N,N_EqSpaced);
        uEqSpaced_ = shsecm(auEqSpaced,buEqSpaced);
        uEqSpaced = reshape(uEqSpaced_,nlatEqSpaced*nlonEqSpaced,3)';

        %% compute Vessel to Vessel part
        X_VesselVessel = computeVesselVessel(X_VesselVessel, ...
                                             cX_Vessel, VesselVessel_LHS);

        %% compute RBC to Vessel part
        X_RBCVessel = computeRBCVessel(X_RBCVessel, ...
                                       cX_Vessel, RBCVessel_LHS, ...
                                       mask_a, mask_b, N, nlat, nlon);
        X_Vessel = [X_VesselVessel; X_RBCVessel];
        
        %% compute Vessel to RBC part
        X_VesselRBC = X_VesselRBC + ...
                      NearlySingular_ComputeKu(VesselRBC_Kernel, cX_RBC, ...
                                               xiEqSpaced, uEqSpaced, ...
                                               coord, coordLocation, ...
                                               RotationMatrix_EqSpaced, ...
                                               mask_a, mask_b, lam, ...
                                               N, NGSphere);
        
        %% compute RBC to RBC 
        X_RBCRBC = X_RBCRBC + computeKu(RBCRBC_Kernel, ...
                                        cX_RBC, u, RotationMatrix, ...
                                        mask_a, mask_b, lam, ...
                                        N, nlat, nlon, NGSphere);
        X_RBC = [X_VesselRBC; X_RBCRBC];
        
        %%
        X = X_Vessel + X_RBC;
    end
    %%
    function y = PreCondition(r)
        Vessel_r = r(1:numNodes*numDofPerNode);
        Vessel_y = VesselVessel_Preconditioner * Vessel_r;
        y = [Vessel_y; r(numNodes*numDofPerNode+1:end)];
    end
end